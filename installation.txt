###Install   (INTERNAL)
Ubuntu LTS 18.04/Windows/AWS EC2(16GB RAM/100GB Harddisk/vCPU min 4)
Install Docker (follow any one accordingly)
    https://docs.docker.com/engine/install/ubuntu/
    https://docs.docker.com/desktop/windows/install/
    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html
    
For Windows, docker desktop(windows10 Pro) or docker toolbox(other windows)
If docker desktop, then enable HyperV
PS>  Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All
Then in Docker Desktop ->General -> unclick WSL2 based engine 
(WSL2 is not tested with below proceedure)
    
Install cassandra Using docker 
    $ docker pull cassandra:3.11.4
    $ docker container ls 
    $ docker run --name cass_cluster  -d cassandra:3.11.4
    $ docker logs cass_cluster  # check for  'Starting listening for CQL clients
    #check stats 
    $ docker stats cass_cluster --no-stream 
    $ docker exec -it cass_cluster cqlsh
    #Then exit 
    > quit 


> docker container ls  --all 
> docker exec -it cass_cluster nodetool version  #cassandra version 
> docker exec -it cass_cluster nodetool status
> docker exec -it cass_cluster bash

##for public ip 
$ docker stop cass_cluster
#create new image as -p only works with run 
$ docker commit cass_cluster cass_cluster_pub
#-p localport:container_port 
#or -p 192.168.1.100:8080:80 	-p 8080:80/udp 	OR -p 8080:80/tcp -p 8080:80/udp
$ docker run --name cass_cluster_pub -p 9042:9042   -td cass_cluster_pub
#do for example java driver and then 
$ docker stop cass_cluster_pub 


##For persistence 
For mounted volume (host /data )
For Desktop +HyperV 
Open Docker desktop -> resources ->File sharing 
Share any dir  and then use like  -v C:/Users/Admin/Desktop/cassandra/data:/var/lib/cassandra in below commands 

For WSL2, it is autoshared 
For docker toolbox, create data after 
$ docker-machine ssh 

For linux and docker toolbox , create data 
$ sudo mkdir /data 
$ sudo chown -R 999:999 /data   #cassandra is 999

Then share 
$ docker run --name cass_cluster_mounted -v /data:/var/lib/cassandra -d cassandra:3.11.4
$ docker exec -it cass_cluster_mounted cqlsh 
> CREATE KEYSPACE IF NOT EXISTS test WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
> CREATE TABLE IF NOT EXISTS test.table1 ( id UUID PRIMARY KEY, lastname text, firstname text );
> DESCRIBE TABLE test.table1
> INSERT INTO test.table1 (id, lastname, firstname) VALUES (5b6962dd-3f90-4c93-8f61-eabfa4a803e2, 'VOS','Marianne');
> select * from test.table1;

$ docker exec -it cass_cluster_mounted nodetool drain 
$ docker stop cass_cluster_mounted
$ docker rm cass_cluster_mounted
$ docker run --name cass_cluster_mounted -v /data:/var/lib/cassandra -d cassandra:3.11.4
$ docker exec -it cass_cluster_mounted cqlsh 
> select * from test.table1;

##To include configuration file(/etc/cassandra/cassandra.yaml) /path/to/ in host and mount like above 
$ docker run --name cass_cluster_mounted  -d cassandra:3.11.4 -Dcassandra.config=/path/to/cassandra.yaml


### Creating Docker cluster 
Ensure that Docker engine has atleat 8G and 4 CPU 
for HyperV , change it in Docker Desktop -> Resources 
For WSL2 based ,  Update C:\Users\User\.wslconfig file(not Tested)
[wsl2]
memory=8GB   # Limits VM memory in WSL 2 up to 2GB
processors=4# Makes the WSL 2 VM use two virtual processors
For Virtual box + docker tool box 
> docker-machine stop
> VBoxManage modifyvm default --cpus 2
> VBoxManage modifyvm default --memory 4096
> docker-machine start
> docker-machine env
> docker-machine ls

Then do below 
> docker image ls
#Create a network 
#Singel host - bridge, multiple host docker-overlay , check https://docs.docker.com/engine/reference/commandline/network_create/

> docker network create -d bridge CassandraNetwork

#-m=2g, restrict memory of container , https://docs.docker.com/config/containers/resource_constraints/
#check for env var https://hub.docker.com/_/cassandra
#eg cassandra memory can be restricted as -e MAX_HEAP_SIZE=1G -e HEAP_NEWSIZE=100M , used for setting java memory 
(we need to start 3 cassandra container, so divide the memory by 3) 

> docker run --name cas1  -m=2g --network CassandraNetwork -e CASSANDRA_CLUSTER_NAME=MyCluster -e CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch -e CASSANDRA_DC=datacenter1 -e CASSANDRA_RACK=rack1 -d cassandra:4.0.1
> docker container ls 
> docker logs cas1

#Ensure it is UN Then proceed below 
$ docker exec -ti cas1 nodetool status 


#get IP - Uses GO template 
#https://docs.docker.com/engine/reference/commandline/inspect/
#https://docs.gomplate.ca/syntax/

> docker inspect --format='{{ .NetworkSettings.Networks.CassandraNetwork.IPAddress}}' cas1
eg The main ip is 172.20.0.2 , This IP needs to be put below 


#Other nodes 
> docker container rm cas2 cas3 
> docker run --name cas2 -m=2g  --network CassandraNetwork  -e CASSANDRA_SEEDS=172.20.0.2 -e CASSANDRA_CLUSTER_NAME=MyCluster -e CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch -e CASSANDRA_DC=datacenter1 -e CASSANDRA_RACK=rack1 -d cassandra:4.0.1
#Ensure both are visible and then only proceed 
$ docker exec -ti cas1 nodetool status 

> docker logs cas2

> docker run --name cas3 -m=2g  --network CassandraNetwork -e CASSANDRA_SEEDS=172.20.0.2 -e CASSANDRA_CLUSTER_NAME=MyCluster -e CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch -e CASSANDRA_DC=datacenter2 -e CASSANDRA_RACK=rack2 -d cassandra:4.0.1
> docker logs cas3 

#Ensure both are visible and then only proceed 
$ docker exec -ti cas1 nodetool status 

The status column of each node should show UN (node is UP and its state is Normal). 
If you see 'UJ' that means your node is joining, just wait for a while and check it again. 
Tokens means no of vnodes and owns does not have much meaning in cluster, see it with keyspace 


#start cqlsh 
> docker exec -ti cas1 cqlsh

##With RF of 2  at DC1 ie each node of DC1 gets one copy ,DC2's RF is 1 and node 1, so that gets copy 
#and QUORUM is 3/2 + 1 = 2 , so one node can go down in DC1, but no node at DC2 
> CREATE KEYSPACE mykeyspace2 WITH replication = {'class':'NetworkTopologyStrategy','datacenter1': 2,'datacenter2': 1};

> CREATE TABLE mykeyspace2.mytable (id int primary key,name text);

#now each is 100% means owns full copy of the data 
$ docker exec -ti cas1 nodetool status mykeyspace2
Datacenter: datacenter1
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address     Load        Tokens  Owns (effective)  Host ID                               Rack
UN  172.20.0.3  91.56 KiB   16      100.0%            f8205b13-de6b-4a9c-9c7a-ece9c4a0d27b  rack1
UN  172.20.0.2  103.77 KiB  16      100.0%            8be61111-b31b-45c9-ba59-fbac41d8eda2  rack1

Datacenter: datacenter2
=======================
Status=Up/Down
|/ State=Normal/Leaving/Joining/Moving
--  Address     Load        Tokens  Owns (effective)  Host ID                               Rack
UN  172.20.0.4  98.74 KiB   16      100.0%            fe539440-58b3-4ed2-8254-8f5aeba7c289  rack1


##Starting and Stopping cassandra gracefully in cluster 
Starting order - cas1, cas2, cas3 
Stopping order - cas3, cas2, cas1 

#stop 
> docker exec -ti cas3 nodetool drain 
> docker exec -ti cas2 nodetool drain 
> docker stop cas2 cas3 
> docker exec -ti cas1 nodetool drain 
> docker stop cas1

#Start 
> docker start cas1 
#Esnure that UN 
> docker exec -ti cas1 nodetool status  
> docker start cas2 
#Esnure that UN 
> docker exec -ti cas1 nodetool status  
> docker start cas3 
#Esnure that UN 
> docker exec -ti cas1 nodetool status  

